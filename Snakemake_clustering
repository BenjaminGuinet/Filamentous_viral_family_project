from Bio import SeqIO 
import pandas as pd 
import re 

List_viruses =["LhFV_free","DFV_free","EfFV_free","PoFV_free","PcFV_free","CcFV1_free","CcFV2"]
List_known_viruses=["AcMNPV","LdMNPV","CpV","NeseNPV","CuniNPV","HzNV-1","HzNV-2","GbNV","OrNV","ToNV","DiNV","DmNV_kal","DmNV_tom","DmNV_esp","DmNV_mau","PmNV","HgNV","DhNV","GpSGHV","MdSGHV","LbFV","AmFV"]



#Create for each Genomes, a "Predicted_orfs" directory where are stored the predicted ORFs

#Genomes directory
Genome_directory="/beegfs/data/bguinet/LbFV_family_project/Genomes/"

#Output clustering directory
Output_cluster_dir="/beegfs/data/bguinet/LbFV_family_project/Clustering/"

## Program used 
mmseqs="/beegfs/data/bguinet/TOOLS/mmseqs/bin/mmseqs"
 

#Add predicted ORFs
with open(Output_cluster_dir+"ALL_Predicted_and_known_ORFs.fa","w") as output:
  #Add predicted ORFs
  for names in List_viruses:
    records = SeqIO.parse(Genome_directory+names+"/Predicted_orfs/"+names+"_prediction_option_1.fa", "fasta")
    for ORF in records:
       print(">",ORF.id+"_"+re.sub("_free","",names),sep="",file=output)
       print(ORF.seq,file=output)
  #Add known ORFs
  #Keep only the accession number as sequence name
  for viruse in List_known_viruses:
    #A .fa file containing the refseq dsdna ORFs of the viruses present in List_known_viruses file should be created before : 
    records = SeqIO.parse(Output_cluster_dir+"Refseq_dsDNA_genomes/"+viruse+".faa", "fasta")
    for ORF in records:
      if ORF.id.count("|") >1:
        print('>',re.search("\\|(.*)\\|",ORF.id)[1],"_",viruse,sep="",file=output)
        print(ORF.seq,file=output)
      elif "_prot_" in ORF.id:
        ORF.id=re.sub(".*_prot_","",ORF.id)
        ORF.id=re.sub(".[0-9]_.*","",ORF.id)
        print('>',re.sub(".*_prot_","",ORF.id),"_",viruse,sep="",file=output)
        print(ORF.seq,file=output)

#Snakemake part 

rule all:
  input:
    Output_cluster_dir+"ALL_Predicted_and_known_ORFs_cluster.tsv",
    Output_cluster_dir+"ALL_Predicted_and_known_ORFs_cluster.tab"
    
rule Blast_and_Clustering:
    params:
      threads="20",
      time="00:40:00",
      name="Clustering_LbFV_family",
      out= Output_cluster_dir+"Clustering_job.out",
      err= Output_cluster_dir+"Clustering_job.error"
    input: 
      database_fasta= Output_cluster_dir+"ALL_Predicted_and_known_ORFs.fa"
    output :
      Blast_output= Output_cluster_dir+"ALL_Predicted_and_known_ORFs_cluster.tsv",
      Clustering_output=Output_cluster_dir+"ALL_Predicted_and_known_ORFs_cluster.tab",
      Binary_table=Output_cluster_dir+"ALL_Predicted_and_known_ORFs_binary.tab"
    shell:
      """
      cd Output_cluster_dir
      {mmseqs} search ALL_Predicted_and_known_ORFs_db ALL_Predicted_and_known_ORFs_db All_versus_All_Predicted_and_known_ORFs tpm_All_versus_All_Predicted_and_known_ORFs -s 7.5 -e 0.001 --threads 20      
      #Transform results 
      {mmseqs} convertalis --format-output 'query,target,pident,alnlen,mismatch,gapopen,qstart,qend,tstart,tend,evalue,bits,tlen' ALL_Predicted_and_known_ORFs_db ALL_Predicted_and_known_ORFs_db All_versus_All_Predicted_and_known_ORFs All_versus_All_Predicted_and_known_ORFs.m8 
      #Save results as clustering tabular file and binary tab according to LbFV ORFs matchs 
      python3 /beegfs/home/bguinet/these_scripts_2/Create_cluster_tab.py --blast {output.Blast_output} --cluster {output.Clustering_filtred_output} --binary {output.Binary_table} 
      #Create clusters files
      python3 /beegfs/home/bguinet/these_scripts_2/Create_cluster_files.py -c {Clustering_filtred_output} -AA /beegfs/data/bguinet/LbFV_family_project/Clustering/ALL_Predicted_and_known_ORFs.fa -o /beegfs/data/bguinet/LbFV_family_project/Clustering/Cluster_seqs/
      """
